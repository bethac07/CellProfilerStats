"""TeloTracker- by Beth Cimini Dec 2009

    Creates a GUI to allow users to analyze telomere movement in live cells by
    taking spot (telomere) position information generated by ImageJ's "ParticleTracker"
    function, correcting for nuclear drift, then automatically caluclating max 
    intensity, mean speed, and max displacement of each spot.  Each new
    parameter can be added by zipping on a new list to a tuple containing information
    for each spot.  It then compiles this information into a master Excel file
    containing information for all the cells of the same type in a given experiment.
    This portion takes the single-cell telomere movement calculations generated by
    TeloTracker.py and compiles them so that all the cells in a given experimental
    condition can be compared.  """

import xlrd
import xlwt
from xlutils.copy import copy
import numpy
import os
from scipy import stats

def pythag2(x,y,a,b): #the pythagorean theorem, for calculatind displacement 
    return (((x[b])-x[a])**2+((y[b])-y[a])**2)**(0.5)

def stdev(a): #standard deviation calculator
    x=[]
    y=[]
    for i in a:
        x.append(float(i))
        y.append(float(i**2))
    b=((sum(y)-(((sum(x))**2)/len(x)))/(len(x)-1))**0.5
    return b


def maxfinder(a): #a function to find the maximum value of a list
    b=[0]
    for i in a:
        if i>b[0]:
            b.append(i)
            del b[0]
    return b[0]

def dispall(sheet,startrow,stoprow,colmx=6,colmy=7):
    #uses the pythagorean theorem to calculate distances between all timepoints
    #points throughout the timecourse
    x=[]
    y=[]
    for rx in range(startrow+1,stoprow):
        x.append(float(sheet.cell_value(rowx=rx, colx=colmx)))
        y.append(float(sheet.cell_value(rowx=rx, colx=colmy)))
    t=[]
    for i in range(len(x)):
        for j in range(len(x)):
            if i <j: #to avoid running each pair twice
                s=pythag2(x,y,i,j)
                t.append(s) #all values dumped to a list to be sifted later
    return t

def dispzero(sheet,startrow,stoprow,colmx=6,colmy=7):
    #similar to dispall, but compares each time point to time=0
    x=[]
    y=[]
    for rx in range(startrow+1,stoprow):
        x.append(float(sheet.cell_value(rowx=rx, colx=colmx)))
        y.append(float(sheet.cell_value(rowx=rx, colx=colmy)))
    t=[]
    for i in range(len(x)):
        s=pythag2(x,y,0,i)
        t.append(s)
    return t

def speed(sheet,startrow,stoprow,colmx=8):
    #returns the speed calculated by TeloTracker as a list
    x=[]
    for rx in range(startrow+1,stoprow-1):
        x.append(float(sheet.cell_value(rowx=rx, colx=colmx)))
    return x

def intens(sheet,startrow,stoprow,colmx=3):
    #returns the intensity values from the raw data
    x=[]
    for rx in range(startrow+1,stoprow):
        x.append(float(sheet.cell_value(rowx=rx, colx=colmx)))
    return x

def statsavmax(sheet,startrow,stoprow):
    #calculates the main statistic (either mean or max) for each parameter
    a=['Telomere','Mean/Max']
    a.append (numpy.mean(speed(sheet,startrow,stoprow)))
    a.append(maxfinder(dispall(sheet,startrow,stoprow)))
    a.append(maxfinder(dispzero(sheet,startrow,stoprow)))
    a.append(maxfinder(intens(sheet,startrow,stoprow)))
    return a

def statsstdev(sheet,startrow,stoprow):
    #calculates the standard deviation of the same parameters
    b=[sheet.cell_value(rowx=startrow, colx=1),'Std Dev']
    b.append (numpy.std(speed(sheet,startrow,stoprow)))
    b.append (numpy.std(dispall(sheet,startrow,stoprow)))
    b.append (numpy.std(dispzero(sheet,startrow,stoprow)))
    b.append (numpy.std(intens(sheet,startrow,stoprow)))
    return b

def spotstats(book):
    #collects all the statistics for each spot and places them in the experiment
    #page the raw data is on
    wb=xlrd.open_workbook(book, formatting_info=True)#open the original excel file
    w=copy(wb) #make it writable
    m=['','','Mean Speed', 'Max Displacement', 'Max Displacement-0',
       'Max Intensity']
    for n in range (wb.nsheets):
        t=[]
        sh=wb.sheet_by_index(n)
        sw=w.get_sheet(n)
        sw.col(10).width=5000
        for rx in range(sh.nrows): #use "telomere" to find the start of each spot
            if sh.cell_value(rowx=rx, colx=0)=='Telomere':
                t.append(rx) 
        t.append(sh.nrows) #also append the end value to analyze the last telomere
        for i in range(len(t)-1):
            a=statsavmax(sh,t[i],t[i+1])#run the statistics programs from above
            b=statsstdev(sh,t[i],t[i+1])
            k=dispzero(sh,t[i],t[i+1])
            for l in range(len(k)):
                sw.write(l+1,15, (k[l]**2))
            for j in range(len(a)): #sort the statistics onto the page of raw data             
                row=sw.row(7*i+j)
                row.write(10,m[j])
                row.write(11,a[j])
                row.write(12,b[j])
    w.save(book)

def spotsMSD(book):
    #collects all the statistics for each spot and places them in the experiment
    #page the raw data is on
    wb=xlrd.open_workbook(book, formatting_info=True)#open the original excel file
    w=copy(wb) #make it writable
    m=[]
    r=[]
    s=[]
    for n in range (wb.nsheets):
        t=[]
        sh=wb.sheet_by_index(n)
        sw=w.get_sheet(n)
        for rx in range(sh.nrows): #use "telomere" to find the start of each spot
            if sh.cell_value(rowx=rx, colx=0)=='Telomere':
                t.append(rx) 
        t.append(sh.nrows) #also append the end value to analyze the last telomere
        for i in range(len(t)-1):
            k=dispzero(sh,t[i],t[i+1])
            l=[]
            for j in range(len(k)):
                l.append((k[j])**2)
            s.append(len(k))
            m.append(l)
    for y in range (max(s)):
        q=[]
        for b in range (len(m)):
            if (len(m[b])-1)>=y:
                if type(m[b][y])==float:
                    q.append(m[b][y])
        r.append([numpy.mean(q),numpy.median(q)])
    return r
        
def collstats(book):
    #picks up the main statistics for every telomere to be meta-analyzed below
    spotstats(book)
    wb=xlrd.open_workbook(book, formatting_info=True)
    z=[]
    for n in range(wb.nsheets):
        sh=wb.sheet_by_index(n)
        x=[]
        a=[]
        b=[]
        c=[]
        d=[]
        for i in range(sh.nrows):
            if type(sh.cell_value(rowx=i, colx=11))==float: #ignore titles & blanks
                if i%7==2: #collects mean
                    a.append(sh.cell_value(rowx=i, colx=11))
                if i%7==3: #collects max displacement
                    b.append(sh.cell_value(rowx=i, colx=11))
                if i%7==4: #collects max displacement from zero
                    c.append(sh.cell_value(rowx=i, colx=11))
                if i%7==5: # collects max intensity
                    d.append(sh.cell_value(rowx=i, colx=11))
        x.append(a)
        x.append(b)
        x.append(c)
        x.append(d)#combine the data for each sheet into x
        z.append(x)#add each finished sheet to a master list to be unpacked below
    return z
            
def sumstats(inbook,outbook,outsheet):
    if os.path.exists(outbook):
        wb=xlrd.open_workbook(outbook) #see if the meta-analysis file already exists
        w=copy(wb) #if so, use a plugin to make it writable
        y=True
    else:
        w=xlwt.Workbook()
        y=False
    z=collstats(inbook)
    n=spotsMSD(inbook)
    wb=xlrd.open_workbook(inbook, formatting_info=True)
    s1=w.add_sheet(outsheet)
    for i in range(18): #Housekeeping and page setup
        s1.col(i).width=4000
    s1.write(0,3,'Cell Means')
    s1.write(0,10,'Experiment Mean')
    s1.write(0,15,'Values of All Telomeres')
    s1.write(0,20, 'MSD')
    for i in range(len(n)-1):
        s1.write(i+1,19,i)
        s1.write(i+1,20,n[i+1][0])
        s1.write(i+1,21,(0.011608*n[i+1][0]))
        s1.write(i+1,23,n[i+1][1])
        s1.write(i+1,24,(0.011608*n[i+1][1]))
    s1.write (0,22,'Diffusion constant')
    s1.write (1,22,(0.011608*n[1][0]/30))
    s1.write (1,25,(0.011608*n[1][1]/30))
    k=['Mean Speed', 'Max Displacement', 'Max Displacement-0','Max Intensity', 'Number of Telomeres']
    m=['Mean/Max','Std Dev']
    s1.write(2,7,m[0]) #Append 'Mean/Max' to overall
    s1.write(3,7,m[1]) #Append 'StDev' to overall
    s1.write(1,12,k[4]) #Append 'Number of Telomeres' heading to overall
    #Sheet Meta-analysis (for individual cells)
    for i in range(len(z)): #Separate each sheet
        s1.write(3*i+2,0,m[0]) #Append 'Mean/Max' to each cell
        s1.write(3*i+3,0,m[1]) #Append 'Std Dev' to each cell
        for j in range(len(z[i])): #Analyze each parameter
            s1.write(3*i+1,j+1,k[j]) #Apply the first four headings to each cell
            s1.write(3*i+2,j+1,numpy.mean(z[i][j]))#Send statistics to meta-page
            s1.write(3*i+3,j+1,numpy.std(z[i][j]))
        s1.write(3*i+2,5,len(z[i][0]))#Append the total number of telomeres
        s1.write(3*i+1,5,k[4])#Append the 'number of telomeres' heading
    #Overall Meta-analysis (all similarly treated cells in the experiment)
    for j in range(len(z[i])): #Calculate the overall mean in each category (all sheets)
        b=[]
        for i in range(len(z)):
            for q in range(len(z[i][j])):
                b.append((z[i][j][q])) #Make one large list of all values in all sheets
        s1.write(1,j+8,k[j]) #Apply headings
        s1.write(1,j+14,k[j]) #Apply headings for list of overall values
        s1.write(2,j+8,numpy.mean(b)) #Do meta-analysis and send to file
        s1.write(3,j+8,numpy.std(b))
        for a in range(len(b)):
            s1.write(a+2,j+14,b[a])#Write down all values for graphing/histogram
    s1.write(2,12,len(b))#Append the total number fo telomeres
    if y:
        ctl=xlrd.open_workbook(outbook)
        ctls=ctl.sheet_by_index(0)
        yy=[]
        zz=[]
        for i in range((ctls.nrows)-2):
            yy.append(ctls.cell(i+2,14).value)
            zz.append(ctls.cell(i+2,15).value)
        r=[]
        s=[]
        for i in range(len(z)):
            for q in range(len(z[i][1])):
                r.append((z[i][0][q]))
                s.append((z[i][1][q]))
        b=stats.ks_2samp(yy,r)
        c=stats.ks_2samp(zz,s)
        s1.write(6,7,"Speed K-S Score")
        s1.write(6,8,"Speed K-S p-value")
        s1.write(6,9,"Displacement K-S Score")
        s1.write(6,10,"Displacement K-S p-value")
        s1.write(7,7,b[0])
        s1.write(7,8,b[1])
        s1.write(7,9,c[0])
        s1.write(7,10,c[1])

    w.save(outbook)

sumstats(r'C:\Users\Beth Cimini\Desktop\WTRaw.xls',r'C:\Users\Beth Cimini\Desktop\Trash4.xls', 'Ice')

